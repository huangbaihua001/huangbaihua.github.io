<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>柏华</title>
    <link>https://huangbaihua.gitee.io/</link>
    <description>Recent content on 柏华</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2021, 柏华; all rights reserved. Powered by Hugo</copyright>
    <lastBuildDate>Sat, 03 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://huangbaihua.gitee.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>10大系统设计面试题</title>
      <link>https://huangbaihua.gitee.io/post/top-10-sdis/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/top-10-sdis/</guid>
      <description>
        
          &lt;p&gt;如何设计大规模分布式系统已经成为软件工程师面试的标配。工程师们在系统设计面试中表现吃力，主要有两个原因：一、缺少开发大规模系统的经验；二、系统设计面试非机构化，开放性的特点，通常问题都没有标准答案。&lt;/p&gt;
&lt;p&gt;在系统设计面试中表现出色将给你带来高回报，因为它能反映你处理复杂系统的能力，并能转化成面试公司为你提供的高级职位和高薪水。&lt;/p&gt;
&lt;p&gt;本文列举了10大系统设计面试题，在这些面试题中，应该如何回答，跟面试官讨论的关键点应该在哪里。&lt;/p&gt;
&lt;p&gt;源文: &lt;a href=&#34;https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444&#34;&gt;Top 10 System Design Interview Questions for Software Engineers&lt;/a&gt; (Fahim ul Haq)&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/system_design.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1设计一个短地址服务&#34;&gt;1、设计一个短地址服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;给定一个典型的长地址(URL)，如何设计服务生成一个短地址并保证它的唯一&lt;/p&gt;
&lt;p&gt;做如下讨论:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何为每个URL生成一个唯一的ID?&lt;/li&gt;
&lt;li&gt;如何大规模地生成唯一的ID（每秒都有成千上万的URL短地址请求）?&lt;/li&gt;
&lt;li&gt;如何处理重定向?&lt;/li&gt;
&lt;li&gt;如何支持自定义短网址?&lt;/li&gt;
&lt;li&gt;如何删除过期的URL等?&lt;/li&gt;
&lt;li&gt;如何跟踪点击统计?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;2设计面向全球用户的视频流媒体服务&#34;&gt;2、设计面向全球用户的视频流媒体服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一想到视频，意味着你的服务将储存和传输PB级的数据。 你要讨论的是如何有效的存储和分发数据，以便大量用户同时观看和分享视频。&lt;/p&gt;
&lt;p&gt;此外，还要讨论：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何记录视频的统计数据？如视频总浏览量，投票量等&lt;/li&gt;
&lt;li&gt;如何给视频添加实时的评论（如弹幕）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;3设计面向全球用户的聊天服务&#34;&gt;3、设计面向全球用户的聊天服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;该服务面试官想知道的是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何设计用户间的一对一的聊天？&lt;/li&gt;
&lt;li&gt;如何扩展你的设计来支持群聊？&lt;/li&gt;
&lt;li&gt;当用户断网如何处理？&lt;/li&gt;
&lt;li&gt;什么时候发送推送消息？&lt;/li&gt;
&lt;li&gt;你能否提供端到端的加密？如何做？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;4设计社交网络留言板服务&#34;&gt;4、设计社交网络，留言板服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;用户可以发布问题或分享链接。其他用户可以回答问题或对共享链接发表评论。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录每个回答的统计数据，例如总浏览量、投票数等&lt;/li&gt;
&lt;li&gt;用户可以关注其他用户或主题&lt;/li&gt;
&lt;li&gt;时间线将由所有用户的最新问题和他们关注的话题组成（类似于信息流生成）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;5设计面向全球用户的文件存储和分享服务&#34;&gt;5、设计面向全球用户的文件存储和分享服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_5.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;讨论点:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用户如何上传/查看/搜索/共享文件或照片&lt;/li&gt;
&lt;li&gt;如何跟踪文件共享的传输情况&lt;/li&gt;
&lt;li&gt;如何允许多个用户编辑同一个文档&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;6服务上亿用户的社交媒体服务&#34;&gt;6、服务上亿用户的社交媒体服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_6.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;当设计一个拥有数亿（或数十亿）用户的社交媒体服务时，面试官很想知道你会如何设计以下组件:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;高效存储和搜索帖子或微博&lt;/li&gt;
&lt;li&gt;信息流的生成&lt;/li&gt;
&lt;li&gt;社交图谱（谁与谁成为好友或谁关注谁--特别是当数百万用户关注一个名人的时候&lt;/li&gt;
&lt;li&gt;很多时候，面试官会用整个面试的时间来讨论信息流的设计&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;7设计一个共享打车服务&#34;&gt;7、设计一个共享打车服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_7.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在设计共享打车服务的时候，要讨论以下内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;最核心的业务场景--当用户请求乘车时，如何有效地将他们与附近的司机匹配&lt;/li&gt;
&lt;li&gt;如何为总是在移动的司机和乘车人存储数百万个地理位置&lt;/li&gt;
&lt;li&gt;如何处理司机/骑手位置的更新（每秒更新数百万次）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;8设计搜索引擎相关服务&#34;&gt;8、设计搜索引擎相关服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_8.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;对于Type-Ahead，当用户输入查询时，你需要设计一个服务，它将根据用户输入的关键字推荐前10个搜索词。讨论的内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何存储以前的搜索查询&lt;/li&gt;
&lt;li&gt;如何保持返回的数据总是新的&lt;/li&gt;
&lt;li&gt;如何为已经输入的字符串找到最佳匹配&lt;/li&gt;
&lt;li&gt;如何处理更新和用户输入太快的情况&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于网络爬虫来说，我们必须设计一个可扩展的服务，它可以抓取整个Web，并且可以获取数以亿计的Web文档。讨论的内容包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如何找到新的网页&lt;/li&gt;
&lt;li&gt;如何对动态变化的网页进行优先级排序&lt;/li&gt;
&lt;li&gt;如何确保你的爬虫不会无限地停留在同一个域名上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;9设计一个api速率限制器&#34;&gt;9、设计一个API速率限制器&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_9.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;开发一个速率限制器服务&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;限制一个实体在一个时间窗口内可以向一个API发送的请求数量，例如，每秒15个请求&lt;/li&gt;
&lt;li&gt;速率限制应该适用于分布式设置，因为API是通过服务器集群访问的&lt;/li&gt;
&lt;li&gt;你将如何处理流量调节&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;10设计一个查找附近的人或地点的服务&#34;&gt;10、设计一个查找附近的人或地点的服务&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/top_10_10.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这项服务将需要为数百万人/地点存储位置。讨论的内容包括&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;该服务的用户如何能够搜索附近的朋友或地点&lt;/li&gt;
&lt;li&gt;如何对地方进行排名（根据距离、用户评价）&lt;/li&gt;
&lt;li&gt;如何根据人口密度有效地存储位置数据（例如，纽约市的一个街区可能比一个小城市的人都多）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
        
      </description>
    </item>
    
    <item>
      <title>2021年度计划分享预告</title>
      <link>https://huangbaihua.gitee.io/post/look-for-forward/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/look-for-forward/</guid>
      <description>
        
          &lt;p&gt;2021年度计划分享预告，敬请期待!&lt;/p&gt;
&lt;h1 id=&#34;职业生涯&#34;&gt;职业生涯&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;我的第一份开发工作(入行)&lt;/li&gt;
&lt;li&gt;我第一次做架构师(突破)&lt;/li&gt;
&lt;li&gt;我第一次成为CTO(复盘，角色转变，经验教训)&lt;/li&gt;
&lt;li&gt;我第一次进独角兽企业(“大厂”工作心得)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;编程系列&#34;&gt;编程系列&lt;/h1&gt;
&lt;p&gt;Talk is cheap. Show me the code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手写RPC框架-微服务必备，基于Netty实现的一个简易框架&lt;/li&gt;
&lt;li&gt;手写红黑树-实现红黑树,深刻理解它查询怎么这么快&lt;/li&gt;
&lt;li&gt;手写B树-实现B树,数据库索引的基础&lt;/li&gt;
&lt;li&gt;DDD实践-DDD落地业务功能开发实践&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;领域建模&#34;&gt;领域建模&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;设计模式在领域建模中的实践&lt;/li&gt;
&lt;li&gt;通用数据模型-基于OFBiz的实践心得&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;分布式&#34;&gt;分布式&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;我所理解的分布式CAP理论&lt;/li&gt;
&lt;li&gt;数据密集型系统设计读书笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;源代码研读&#34;&gt;源代码研读&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Spring IOC源代码研读笔记&lt;/li&gt;
&lt;li&gt;JDK集合源代码研读笔记&lt;/li&gt;
&lt;li&gt;JDK并发框架源代码研读笔记&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;持续学习&#34;&gt;持续学习&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;英语长难句-阅读英语文章的绊脚石，突破考研英语长难句，轻松读懂技术文章&lt;/li&gt;
&lt;li&gt;如何提高英语翻译水准-以考促学,CATT13的突破之路&lt;/li&gt;
&lt;li&gt;微积分上岸指南-我的高等数学之微积分学习之路&lt;/li&gt;
&lt;li&gt;概率论上岸指南-我的概率论学习之路&lt;/li&gt;
&lt;li&gt;会计基础-高级管理人员必须具备的基础会计能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
        
      </description>
    </item>
    
    <item>
      <title>离散数学-图论-图的应用</title>
      <link>https://huangbaihua.gitee.io/post/graph-theory-03/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/graph-theory-03/</guid>
      <description>
        
          &lt;p&gt;本文是 《离散数学-图论》系列文章的第三篇，主要讨论了图的应用，包括最小生成树的生成(Prim算法和Kruskal算法),最短路径的基本实现(Dikstra算法)&lt;/p&gt;
&lt;h1 id=&#34;离散数学-图论-图的应用&#34;&gt;离散数学-图论-图的应用&lt;/h1&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;p&gt;文章完善中~敬请期待~&lt;/p&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考文献资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] 离散数学(第五版) 机械工业出版社&lt;/li&gt;
&lt;li&gt;[2] 算法(第四版) 人民邮电出版社 中国工信出版集团&lt;/li&gt;
&lt;li&gt;[3] 离散数学(2014版) (计算机及应用专业 独立本科段)  机械工业出版社&lt;/li&gt;
&lt;li&gt;[4] &lt;a href=&#34;https://zh.wikiredia.com&#34;&gt;维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
        
      </description>
    </item>
    
    <item>
      <title>离散数学-图论-树</title>
      <link>https://huangbaihua.gitee.io/post/graph-theory-02/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/graph-theory-02/</guid>
      <description>
        
          &lt;p&gt;本文是 《离散数学-图论》系列文章的第二篇，主要讨论了树(一种特殊的图)。包括树的基本概念和性质，二叉查找树，平衡查找树，红黑树的基本实现。&lt;/p&gt;
&lt;h1 id=&#34;离散数学-图论-树一种特殊的图&#34;&gt;离散数学-图论-树,一种特殊的图&lt;/h1&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;p&gt;文章完善中~敬请期待~&lt;/p&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考文献资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] 离散数学(第五版) 机械工业出版社&lt;/li&gt;
&lt;li&gt;[2] 算法(第四版) 人民邮电出版社 中国工信出版集团&lt;/li&gt;
&lt;li&gt;[3] 离散数学(2014版) (计算机及应用专业 独立本科段)  机械工业出版社&lt;/li&gt;
&lt;li&gt;[4] &lt;a href=&#34;https://zh.wikiredia.com&#34;&gt;维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
        
      </description>
    </item>
    
    <item>
      <title>离散数学-图论-理解图</title>
      <link>https://huangbaihua.gitee.io/post/graph-theory-01/</link>
      <pubDate>Sat, 03 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/graph-theory-01/</guid>
      <description>
        
          &lt;p&gt;前言： 我记得C语言入门的时候，当时的老师就说如果把编程当作是练武的话，那数据结构和算法一定是最强的内功心法。当时不是很理解，直到遇到技术瓶颈无法突破，感到很痛苦的时候，沉下心，再认真学习这些计算机基础理论时，这才豁然开朗
，深刻理解了当时老师说过的话。有了扎实的理论基础，语言只是实现你想法的工具而已，有了扎实的理论基础，能显著拔高你的技术天花板，延长你的技术寿命，更容易获得高薪。&lt;/p&gt;
&lt;p&gt;图是计算机中最重要的数据结构，不仅在计算机领域有着广泛的应用，在诸如商业和科学等其它领域也有应用。 《离散数学-图论》系列文章将展示在计算机中是如何存储和表示图的，基于图的重要算法及Java代码实现，一些实际业务场景中用到的重要应用。&lt;/p&gt;
&lt;p&gt;本文是 《离散数学-图论》系列文章的第一篇，主要介绍了图的基本概念，图的表示方法，图的重要性。&lt;/p&gt;
&lt;h1 id=&#34;离散数学-图论-理解图&#34;&gt;离散数学-图论-理解图&lt;/h1&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%B8%BA%E4%BB%80%E4%B9%88%E5%9B%BE%E5%A6%82%E6%AD%A4%E9%87%8D%E8%A6%81&#34;&gt;为什么图如此重要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%9B%BE%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5&#34;&gt;图的基本概念&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%9B%BE%E7%9A%84%E8%A1%A8%E7%A4%BA&#34;&gt;图的表示&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%9B%BE%E7%9A%84%E8%BF%9E%E9%80%9A%E6%80%A7&#34;&gt;图的连通性&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;为什么图如此重要&#34;&gt;为什么图如此重要&lt;/h2&gt;
&lt;p&gt;下面，先来看一下图的典型应用&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;应用&lt;/th&gt;
&lt;th&gt;节点&lt;/th&gt;
&lt;th&gt;链接&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;地图&lt;/td&gt;
&lt;td&gt;十字路口&lt;/td&gt;
&lt;td&gt;公路&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;网络内容&lt;/td&gt;
&lt;td&gt;网页&lt;/td&gt;
&lt;td&gt;超链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;电路&lt;/td&gt;
&lt;td&gt;元器件&lt;/td&gt;
&lt;td&gt;导线&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;任务调度&lt;/td&gt;
&lt;td&gt;任务&lt;/td&gt;
&lt;td&gt;限制条件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;商业交易&lt;/td&gt;
&lt;td&gt;客户&lt;/td&gt;
&lt;td&gt;交易&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;配对&lt;/td&gt;
&lt;td&gt;学生&lt;/td&gt;
&lt;td&gt;申请&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;计算机网络&lt;/td&gt;
&lt;td&gt;网站&lt;/td&gt;
&lt;td&gt;物理链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;软件&lt;/td&gt;
&lt;td&gt;方法&lt;/td&gt;
&lt;td&gt;调用关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;社交网络&lt;/td&gt;
&lt;td&gt;人&lt;/td&gt;
&lt;td&gt;好友关系&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;[注] 表格来源 算法(第四版)-330页-图的典型应用&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如上图所示，图的应用很广泛，不仅在计算机领域，在其它领域（如电路设计,商业分析）基本是最核心的应用。 如果不理解图，那么开发并优化此类应用就无从下手。&lt;/p&gt;
&lt;p&gt;如上图所示，在现实业务场景中，只要能将业务对象抽象成节点和链接，那么由&lt;strong&gt;节点&lt;/strong&gt;和&lt;strong&gt;链接&lt;/strong&gt;就组成了一张&lt;strong&gt;图&lt;/strong&gt;，就可以基于图的基本性质，基本算法，实现很多很酷的应用。比如工作中常用到的脑图就是图的典型应用。&lt;/p&gt;
&lt;h2 id=&#34;图的基本概念&#34;&gt;图的基本概念&lt;/h2&gt;
&lt;p&gt;一个图(Graph)包含两个部分，一部分是顶点(Vertices)，另一部分是边(Edges)。顶点与边的映射关系(φ)， 记作：
$$
\color{blue} G = &amp;lt;V,E,φ&amp;gt;
$$
其中V是非空有限顶点集合，它的元素成为结点; E是边的集合(简称边集)，它的元素成为边。 而φ是从E到V中的有序对或无序对的映射&lt;/p&gt;
&lt;p&gt;当顶点分别是u,v时，连接两个顶点的边可以表示为一个二元组(u,v),或是 &amp;lt;u,v&amp;gt;。其中(u,v)表示无序对，对应的边是没有方向的,叫无向边，&amp;lt;u,v&amp;gt;表示有序对，对应的的边是有方向的，叫有向边。&lt;/p&gt;
&lt;p&gt;图中的边都是无向的叫无向图，图中的边都是有向边叫有向图，图中即含有无向边又含有有向边，可以将其中所有的无向边表示为对应的有向边，从而成为有向图。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[实例1]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下所示无向图G1 由 5个顶点 和 7条无向边组成。
$$
顶点集合： \color{blue} V = \text{\textbraceleft}0,1,2,3,4\text{\textbraceright}
$$
$$
边集： \color{blue} E = \text{\textbraceleft}(0,0),(0,2),(0,3),(2,3),(2,4),(3,4),(1,4)\text{\textbraceright}
$$
&lt;img src=&#34;https://huangbaihua.gitee.io/images/graph/g1.png&#34; alt=&#34;无向图G1&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[实例2]&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如下所示有向图G2 由 3个顶点 和 6条有向边组成。
$$
顶点集合： \color{blue} V = \text{\textbraceleft}A,B,C\text{\textbraceright}
$$
$$
边集： \color{blue} E = \text{\textbraceleft}&amp;lt;A,B&amp;gt;,&amp;lt;B,A&amp;gt;,&amp;lt;B,C&amp;gt;,&amp;lt;C,B&amp;gt;,&amp;lt;A,C&amp;gt;,&amp;lt;C,A&amp;gt;\text{\textbraceright}
$$
&lt;img src=&#34;https://huangbaihua.gitee.io/images/graph/g2.png&#34; alt=&#34;有向图G2&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[实例3]&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-fallback&#34; data-lang=&#34;fallback&#34;&gt;&lt;span class=&#34;ln&#34;&gt;1&lt;/span&gt;根据以下定义，试画出G的图形 
&lt;span class=&#34;ln&#34;&gt;2&lt;/span&gt;G=&amp;lt;V,E,φ&amp;gt;，其中: V={a,b,c,d}， E={e1,e2,e3,e4}
&lt;span class=&#34;ln&#34;&gt;3&lt;/span&gt;φ(e1) = (a,b)
&lt;span class=&#34;ln&#34;&gt;4&lt;/span&gt;φ(e2) = (b,c)
&lt;span class=&#34;ln&#34;&gt;5&lt;/span&gt;φ(e3) = (a,c)
&lt;span class=&#34;ln&#34;&gt;6&lt;/span&gt;φ(e4) = (a,a)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;G的图形&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/graph/g3.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;图的连通性&#34;&gt;图的连通性&lt;/h2&gt;
&lt;p&gt;文章完善中~敬请期待~&lt;/p&gt;
&lt;h2 id=&#34;图的表示&#34;&gt;图的表示&lt;/h2&gt;
&lt;p&gt;文章完善中~敬请期待~&lt;/p&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;参考文献资料&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[1] 离散数学(第五版) 机械工业出版社&lt;/li&gt;
&lt;li&gt;[2] 算法(第四版) 人民邮电出版社 中国工信出版集团&lt;/li&gt;
&lt;li&gt;[3] 离散数学(2014版) (计算机及应用专业 独立本科段)  机械工业出版社&lt;/li&gt;
&lt;li&gt;[4] 离散数学精讲 华夏大地教育网&lt;/li&gt;
&lt;li&gt;[5] &lt;a href=&#34;https://zh.wikiredia.com&#34;&gt;维基百科&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
        
      </description>
    </item>
    
    <item>
      <title>10倍程序员的秘密</title>
      <link>https://huangbaihua.gitee.io/post/the-mythical-10x-programmer/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/the-mythical-10x-programmer/</guid>
      <description>
        
          &lt;p&gt;高效的程序员应该具备哪些素质，&amp;quot;10倍程序员&amp;quot;给你答案!。&lt;/p&gt;
&lt;p&gt;源文: &lt;a href=&#34;http://antirez.com/news/112&#34;&gt;The mythical 10x programmer&lt;/a&gt; (antirez)&lt;/p&gt;
&lt;p&gt;在编程世界中，10倍程序员是指那些能够完成普通程序员十倍工作的程序员，对于普通程序员， 我们可以想象他是一个擅长一般编码工作，但并不具备10倍程序员这样具有神奇魔力的程序员。 其实为了更好地描述 &amp;quot;普通程序员 &amp;quot;
的特点，不如说它代表的是程序员这个群体中，拥有平均编程产出的人。&lt;/p&gt;
&lt;p&gt;编程界对于是否存在这样的程序员观点明显两级分化： 一方说压根就不存在这样的10倍程序员，另一方又说它不仅存在， 只要你知道去哪里找，甚至还有100倍程序员存在。&lt;/p&gt;
&lt;p&gt;如果你把编程看成是一门 &amp;quot;线性&amp;quot;学科，那么很显然，10倍程序员看起来是不太合理的。一个人跑步怎么可能比另一个人跑得快10倍？ 又或者一个建筑工人在同样的时间内能建造出另一个工人10倍的东西？ 然而编程是一门设计学科，它非常特殊。
即使程序员不参与程序的实际架构设计，实现程序的功能仍然需要进行精心地设计。&lt;/p&gt;
&lt;p&gt;所以，如果程序的设计和实现不是线性的能力，那么像经验、编码能力、基础知识、识别系统无用部分的能力，在我看来，不仅仅是线性的
优势，也是创建程序的效率倍增器。当然，这样的现象通常发生在那些即能设计又能实现程序的人身上。越是“目标导向”的任务，一个潜在的10倍
程序员越能发挥自己的能力，以较小的付出达成目标。当手头的任务越是固定，对使用什么工具以及如何实现有确定的指导方针时，10倍程序员 在更短时间内完成大量工作的能力就会被削弱，但他仍能可以利用“局部”设计的可能性更好地完成工作。&lt;/p&gt;
&lt;p&gt;在二十年的程序员生涯中，我观察了其它与我一起工作的程序员；也作为同事，在我的指导下，为了达成某个目标，为Redis和其它项目提供补丁。
他们当中很多人对我说，他们认为我是一个编程非常快的程序员。考虑到我还远不是一个工作狂，但我也会把自己做为一个如何快速编程的一个参考。&lt;/p&gt;
&lt;p&gt;以下是我认为对程序员工作效率影响最大的因素。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;赤裸裸的编程能力： 完成子任务的能力&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序员最明显的限制或优势之一，就是实际编码实现程序子任务的能力：如编写一个函数，一个算法或者其它什么。 令人惊讶的是，根据我的经验，非常有效地使用基本的命令式编程结构来实现某些功能的能力并不像人们想象的那样普遍。
在一个团队中，有时我发现一些理论非常差的程序员，他们甚至连一个简单的排序算法都不知道，却能比那些理论上非常优秀， 但在实现解决方案的实践中表现非常糟糕的刚毕业程序员能完成更多的工作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;经验： 模式匹配&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我所说的经验是指针对一些重复性任务已经探索出的一套解决方案。一个有经验的程序员最终会知道如何处理各种子任务。 这既避免了大量的设计工作，尤其经验是抵御设计错误的极其有力的武器，而设计错误又是简单性的最大敌人之一。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;专注力： 实际时间VS假设时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果不看时间质量，写代码的小时数是无关紧要的。缺乏专注力可以由内部和外部因素产生。 内部因素是拖延症，对手头的项目缺乏兴趣（你不可能做好你不喜欢的事情），缺乏运动、健康，睡眠不好或很少。
外部因素是频繁的会议、没有办公场所环境、同事经常打断等等。似乎自然而然，试图提高专注力，减少干扰，会对编程生产力产生非边际效应。 有时候为了获得专注力，需要采取极端的措施。比如我会不时地看看邮件，但是大部分邮件都不会回复。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;设计牺牲： 牺牲5%，得到90%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当人们不愿意认识到项目的一个非功能性目标带来非常大的设计复杂性，或者使另一个更重要的目标很难完成时，往往会产生复杂性， 因为在功能特性和非功能特性之间存在着设计矛盾。
对于一个设计师来说，认识到设计中所有不容易实现的部分是非常重要的，也就是说，付出和产出之间是不成正比的。
一个项目的执行是为了实现产出的最大化，要准确地关注那些重要的、可以在合理的时间内实现的方面。例如在设计Disque这个消息中间件时，在某个时刻我意识到，
只要为消息努力提供最佳的排序，项目的其他方面都可以得到实质性的改善：可用性、查询语言和客户端交互、简单性和性能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;简单性&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这是一个显而易见的观点，意味着所有和没有。为了理解什么是简单性，值得检查一下复杂性通常是如何产生的。我认为，产生复杂性的两个主要因素是： 一，不愿进行设计牺牲，二，设计活动中错误的积累。&lt;/p&gt;
&lt;p&gt;如果你在设计过程中思考，每追求一条错误的路径，我们就会离最优解越来越远。一个最初的设计错误，在错误的人手里，不会产生对同一系统的重新设计，
而是会导致设计另一个更复杂的解决方案，以应对最初的错误。因此，项目每错一步，就会变得更加复杂，效率降低。&lt;/p&gt;
&lt;p&gt;实现简单化的方法就是用 &amp;quot;概念验证 &amp;quot;来推理，让大量的简单设计在程序员的脑海中探索，从一些看起来最可行、最直接的方案开始工作。之后根据经验和个人的设计能力，可以改进设计， 为需要解决的子设计找到合理的解决方案。&lt;/p&gt;
&lt;p&gt;然而每次需要复杂的解决方案时，都要经过长时间的推理，如何避免复杂，只有在没有找到更好的可能性，甚至考虑完全不同的替代方案时，才会继续朝这个方向发展。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;完美主义,或者说如何扼杀你的生产力，让你的设计出现偏差。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;完美主义有两种变体：一种是在程序中达到最佳的可衡量性能的工程文化，另一种是人格特质。在这两种情况下，我认为这是程序员快速交付程序的最大障碍之一。
完美主义和对外部评判的恐惧插入了一种设计偏见，会导致错误的选择，以便只根据心理或微不足道的可测量参数来完善设计，其中像鲁棒性、简单性、及时交付能力这样的东西，往往从不考虑。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;知识：一些理论会有帮助&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在处理复杂的任务时，关于数据结构的知识、计算的基本限制、非琐碎的算法，这些都非常适用于某些任务的建模，都会对找到合适的设计产生影响。不需要成为一个什么都懂的超级专家，
但至少要知道一个问题的众多潜在解决方案，这当然是需要的。例如，可以将设计牺牲（接受一定的错误百分比）和了解概率集基数估计量组合在一起，以避免复杂，缓慢且内存效率低的解决方案， 以便对计算流中的唯一项进行计数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;低层次： 理解机器&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;程序中的一些问题，即使是在使用高级语言的情况下，也是由于对计算机如何执行某项任务的误解而产生的。 这甚至可能导致由于所使用的工具或算法存在根本性的问题，需要重新设计和重新从头开始实施一个项目。 良好的C语言能力，对CPU工作原理的理解，
以及对内核如何运行和系统调用如何实现的清晰思路，可以避免后期出现不好的意外。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调试技巧&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了找到bug，很容易花费巨大的工作量。善于循序渐进获取bug的错误状态，以便用一套合理的步骤来修复它，加上写简单代码的态度，不可能包含太多的bug， 
这两者对程序员的效率有很大的影响。&lt;/p&gt;
&lt;p&gt;程序员的以上素质对工作输出的影响是10倍的，这一点我并不奇怪。综合来看，他们可以从可行模型的开始设计良好的实现，并且可能比替代方法简单好几倍。 有一种强调简单的方法，我喜欢称之为 &amp;quot;机会编程&amp;quot;
。基本上，在每个开发步骤中，都会选择要实现的功能集，以便以最小的工作量对程序的用户群体产生最大的影响。&lt;/p&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
        
      </description>
    </item>
    
    <item>
      <title>优秀的首席技术官</title>
      <link>https://huangbaihua.gitee.io/post/awesome-cto/</link>
      <pubDate>Sun, 28 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/awesome-cto/</guid>
      <description>
        
          &lt;p&gt;不想当CTO的工程师不是合格的工程师，那么如何才能成为一名优秀的CTO? 本文从网络上精心挑选了一系列文章，对有志成为一名CTO的工程师提供一些经验和方法。&lt;/p&gt;
&lt;p&gt;源文: &lt;a href=&#34;https://github.com/kuchin/awesome-cto&#34;&gt;Awesome CTO&lt;/a&gt; (kuchin)&lt;/p&gt;
&lt;h1 id=&#34;优秀的首席技术官&#34;&gt;优秀的首席技术官&lt;/h1&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%BB%BC%E5%90%88&#34;&gt;综合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8B%9B%E8%81%98&#34;&gt;招聘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%AE%A1%E7%90%86&#34;&gt;管理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%89%8B%E5%86%8C&#34;&gt;手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%A0%94%E5%8F%91%E6%B5%81%E7%A8%8B&#34;&gt;研发流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9E%B6%E6%9E%84&#34;&gt;架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%8A%80%E6%9C%AF&#34;&gt;技术&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%88%9B%E4%B8%9A%E5%85%AC%E5%8F%B8&#34;&gt;创业公司&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%9B%B8%E5%85%B3%E5%86%85%E5%AE%B9&#34;&gt;相关内容&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BA%A7%E5%93%81&#34;&gt;产品&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%B8%82%E5%9C%BA%E8%90%A5%E9%94%80&#34;&gt;市场营销&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9B%B4%E5%A4%9A%E9%93%BE%E6%8E%A5&#34;&gt;更多链接&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;综合&#34;&gt;综合&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.allthingsdistributed.com/2007/07/the_different_cto_roles.html&#34;&gt;首席技术官的多角色&lt;/a&gt; - Werner Vogels &lt;em&gt;(Amazon CTO)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/Is-it-required-to-be-a-developer-coder-to-become-a-CTO-Why-cant-an-architect-become-a-CTO&#34;&gt;成为首席技术官必须是开发人员吗?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.rudebaguette.com/2011/12/01/three-golden-rules-to-finding-a-cto/&#34;&gt;寻找首席技术官的三大黄金法则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20171128214925/https://juokaz.com/blog/becoming-a-cto&#34;&gt;成为首席技术官&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://avc.com/2011/10/vp-engineering-vs-cto/&#34;&gt;技术副总裁VS首席技术官&lt;/a&gt; - Fred Wilson &lt;em&gt;(Union Square Ventures)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-makes-for-a-successful-CEO-and-CTO-relationship-in-a-startup&#34;&gt;创业公司中首席执行官和首席技术官之间成功的关系是什么?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.gregbrockman.com/figuring-out-the-cto-role-at-stripe&#34;&gt;#定义首席技术官&lt;/a&gt; - Greg Brockman &lt;em&gt;(Stripe CTO)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://engineering.gusto.com/how-my-role-as-cto-has-changed-as-weve-grown-to-100-engineers/&#34;&gt;当发展到100名工程师时,首席技术官的角色演变&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lethain.com/first-ninety-days-cto-vpe/&#34;&gt;作为首席技术官或技术副总裁的第一个90天&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/20140615184118-4928723-the-differences-between-a-cto-and-a-vp-engineering/&#34;&gt;成为首席技术官跟技术副总裁的不同之处&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;招聘&#34;&gt;招聘&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2006/10/25/the-guerrilla-guide-to-interviewing-version-30/&#34;&gt;面试指南&lt;/a&gt; - Joel Spolsky &lt;em&gt;(StackOverflow co-founder)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2000/08/09/the-joel-test-12-steps-to-better-code/&#34;&gt;Joel测试： 改进代码的12个步骤&lt;/a&gt; - Joel Spolsky&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/why-cant-programmers-program/&#34;&gt;为什么程序员反而不会编程？&lt;/a&gt; - Jeff Atwood &lt;em&gt;(StackOverflow co-founder)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/we-hire-the-best-just-like-everyone-else/&#34;&gt;雇用最优秀的人&lt;/a&gt; - Jeff Atwood&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.codinghorror.com/getting-the-interview-phone-screen-right/&#34;&gt;做好电话面试筛选&lt;/a&gt; - Jeff Atwood&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-the-engineering-interview-process-like-at-Stripe&#34;&gt;Stripe工程面试流程&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/foursquare-direct/improving-our-engineering-interview-process-106173ba25a9&#34;&gt;改进我们的工程面试流程&lt;/a&gt; &lt;em&gt;(Foursquare)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2005/07/25/hitting-the-high-notes/&#34;&gt;Hitting the High Notes&lt;/a&gt; - Joel Spolsky&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/top-10-system-design-interview-questions-for-software-engineers-8561290f0444&#34;&gt;10大系统设计面试题&lt;/a&gt; - &lt;em&gt;(HackerNoon)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://angel.co/blog/how-to-hire-world-class-engineers&#34;&gt;如何雇用世界级的工程师？&lt;/a&gt; &lt;em&gt;(angel.co)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hiringengineersbook.com/post/trouble-hiring/&#34;&gt;招聘高级工程师很困难？可能是你的问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/viraptor/reverse-interview&#34;&gt;反向面试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://charity.wtf/2019/10/18/the-real-11-reasons-i-dont-hire-you/&#34;&gt;我不雇用你的11个真实原因&lt;/a&gt; - Charity Majors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.linkedin.com/pulse/how-interview-amazon-leadership-david-anderson/&#34;&gt;亚马逊是如何面试的&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://delian.io/lessons-2&#34;&gt;来自 Keith Rabois的教训: 如何面试高管？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://delian.io/lessons-5&#34;&gt;来自 Keith Rabois的教训: 如何吸引人才？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/viraptor/reverse-interview&#34;&gt;反向面试题&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;管理&#34;&gt;管理&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://antirez.com/news/112&#34;&gt;10倍程序员的秘密&lt;/a&gt; - Salvatore Sanfilippo &lt;em&gt;(author of Redis)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://charity.wtf/2017/05/11/the-engineer-manager-pendulum/&#34;&gt;做工程师还是做项目经理?&lt;/a&gt; - Charity Majors&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.paulgraham.com/makersschedule.html&#34;&gt;研发的日程表，管理者的日程表&lt;/a&gt; - Paul Graham &lt;em&gt;(Y Combinator)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://arxiv.org/pdf/1702.01715.pdf&#34;&gt;谷歌的软件工程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://rework.withgoogle.com&#34;&gt;Google re:Work&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.defmacro.org/2014/10/03/engman.html&#34;&gt;44节工程管理课程&lt;/a&gt; (correct link to &lt;a href=&#34;https://review.firstround.com/power-up-your-team-with-nonviolent-communication-principles&#34;&gt;non-violent communication&lt;/a&gt; for lesson 34)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.officevibe.com/blog/secret-to-discussing-pay-with-employees&#34;&gt;与员工谈薪酬的秘密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/LappleApple/awesome-leading-and-managing&#34;&gt;优秀的领导和管理&lt;/a&gt; &lt;em&gt;(Github)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://lcamtuf.blogspot.com/2018/02/on-leadership.html&#34;&gt;从技术到领导力的进步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://capwatkins.com/blog/a-review-process&#34;&gt;审查流程&lt;/a&gt; - Cap Watkins&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/12-manager-readmes-from-silicon-valleys-top-tech-companies-26588a660afe&#34;&gt;来自顶级科技公司的12名经理自述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/presentation/d/1weEU1G-4JAhD6tRlYinYS1ZOHI_SAUQkvTBFBzi67G0/edit&#34;&gt;可预测的交付&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/How-do-some-people-get-stuck-at-a-senior-engineer-position-while-a-few-starts-or-rise-up-to-EVP-level-in-big-organizations-like-Microsoft-Amazon-Apple-Google-What-exactly-should-I-keep-doing-to-go-up-the-ladder&#34;&gt;在大公司中，如何升到执行副总裁？&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://capwatkins.com/blog/should-i-become-a-manager&#34;&gt;我应该成为一名管理者么?&lt;/a&gt; - Cap Watkins&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.usejournal.com/how-to-fail-as-a-new-engineering-manager-30b5fb617a&#34;&gt;刚成为项目经理时，是如何失败的？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://queue.acm.org/detail.cfm?id=3308563&#34;&gt;最多管理的设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/charlax/engineering-management&#34;&gt;工程管理&lt;/a&gt; &lt;em&gt;(Github)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@odedmagger/on-boarding-software-engineers-10-techniques-to-get-it-right-927cb73e3dab&#34;&gt;入职软件工程师&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marker.medium.com/how-to-hold-your-team-accountable-9fa57bfb315d&#34;&gt;让你的团队负责任&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.seebs.net/faqs/manager.html&#34;&gt;管理者常见问题&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firstround.com/review/the-power-of-performance-reviews-use-this-system-to-become-a-better-manager/&#34;&gt;绩效考核的力量&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/swlh/principles-of-engineering-management-c9cae1b34a8b&#34;&gt;工程管理的原则&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.payscale.com/cbpr&#34;&gt;补偿最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firstround.com/review/draw-the-owl-and-other-company-values-you-didnt-know-you-should-have/&#34;&gt;Draw The Owl and Other Company Values You Didn’t Know You Should Have&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://charity.wtf/2019/10/30/a-managers-bill-of-responsibilities-and-rights/&#34;&gt;经理的职责及权利&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://charity.wtf/2019/11/23/questionable-advice-after-being-a-manager-can-i-be-happy-as-a-cog/&#34;&gt;做了经理人，我还能快乐么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://firstround.com/review/the-secret-to-a-great-planning-process-lessons-from-airbnb-and-eventbrite/&#34;&gt;优秀的规划流程的秘密 — 来自 Airbnb and Eventbrite 的教训&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://increment.com/teams/&#34;&gt;Increment: 团队&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/better-programming/career-growth-frameworks-in-software-engineering-a-review-4aa6c59a9cf6&#34;&gt;软件工程师的职业发展框架&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://noamelf.com/posts/hacking-team-communications/&#34;&gt;黑客团队的沟通&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://increment.com/teams/how-to-build-a-startup-engineering-team/&#34;&gt;如何组建创业公司的工程师团队&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://buttondown.email/cote/archive/hug-your-manager/&#34;&gt;拥抱你的经理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://delian.io/lessons-3&#34;&gt;来自 Keith Rabois的教训: 如何成为一名高效的执行者&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.doist.com/context-switching/&#34;&gt;上下文切换如何破坏您的生产力&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;手册&#34;&gt;手册&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/team-playbook&#34;&gt;Atlassian 团队游戏手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.valvesoftware.com/company/Valve_Handbook_LowRes.pdf&#34;&gt;Valve 员工手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/basecamp/handbook&#34;&gt;Basecamp 员工手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://about.gitlab.com/handbook/&#34;&gt;GitLab 团队手册&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://works.hashicorp.com/&#34;&gt;HashiCorp是如何运作的&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;研发流程&#34;&gt;研发流程&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Scrum/敏捷开发
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.goodagile.com/resources/goodagile_managers_presentation.pdf&#34;&gt;给经理和高管的Scrum介绍&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.yodiz.com/blog/writing-user-stories-examples-and-templates-in-agile-methodologies/&#34;&gt;用敏捷方法编写用户故事，实例和模板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;持续集成 / 持续部署
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-fundamental-principles-of-continuous-integration&#34;&gt;持续集成的基本原则是什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mindtheproduct.com/2016/02/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/&#34;&gt;产品经理的持续交付和DevOps指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Git代码管理
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows&#34;&gt;Git工作流比较&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://nvie.com/posts/a-successful-git-branching-model/&#34;&gt;一个成功的Git分支模型&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;替代方案: &lt;a href=&#34;https://www.atlassian.com/continuous-delivery/continuous-integration/trunk-based-development&#34;&gt;基于主干的开发&lt;/a&gt; (focused on &lt;a href=&#34;https://cloud.google.com/solutions/devops/devops-tech-trunk-based-development&#34;&gt;DevOps and CI/CD&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;计划
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.joelonsoftware.com/2007/10/26/evidence-based-scheduling/&#34;&gt;Evidence Based Scheduling&lt;/a&gt; - Joel Spolsky &lt;em&gt;(StackOverflow co-founder)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://marker.medium.com/why-you-should-learn-to-stop-worrying-and-love-technical-debt-55bb5684f94c&#34;&gt;为什么要停止担心并爱上技术债务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;[书籍] &lt;a href=&#34;https://en.wikipedia.org/wiki/The_Mythical_Man-Month&#34;&gt;人月神话&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;危机
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.serverdensity.com/how-to-write-a-postmortem/&#34;&gt;如何写事故报告&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/danluu/post-mortems&#34;&gt;事故报告清单&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.startuplessonslearned.com/2008/11/five-whys.html&#34;&gt;创业者的经验教训--五个为什么？&lt;/a&gt; - Eric Ries &lt;em&gt;(creator of the Lean Startup)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://thenewstack.io/call-rotations-best-wake-devs-middle-night/&#34;&gt;在半夜叫醒开发人员的最佳方法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@copyconstruct/testing-in-production-the-safe-way-18ca102d0ef1&#34;&gt;用安全的方法在生产环境上测试&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;架构&#34;&gt;架构&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://12factor.net&#34;&gt;十二要素 App&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.reactivemanifesto.org&#34;&gt;响应式宣言&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/aphyr/distsys-class&#34;&gt;分布式系统介绍&lt;/a&gt; - Kyle Kingsbury &lt;em&gt;(aphyr, author of Jepsen)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://riak.com/posts/technical/microservices-please-dont/&#34;&gt;微服务--请不要这样做&lt;/a&gt; (also: &lt;a href=&#34;https://news.ycombinator.com/item?id=12508655&#34;&gt;HackerNews discussion&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.dwmkerr.com/the-death-of-microservice-madness-in-2018/&#34;&gt;2018年微服务疯狂之殇&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://highscalability.com/blog/2017/3/27/faster-networks-cheaper-messages-microservices-functions-edg.html&#34;&gt;将微服务缩小为功能&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/design-patterns-for-microservices/&#34;&gt;微服务的设计模式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-is-Serverless-Computing&#34;&gt;无服务器架构&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.baqend.com/nosql-databases-a-survey-and-decision-guidance-ea7823a822d&#34;&gt;NoSQL数据库：调查与决策指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vinaysahni.com/best-practices-for-a-pragmatic-restful-api&#34;&gt;设计实用性RESTful API的最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@rdsubhas/10-modern-software-engineering-mistakes-bc67fbef4fc8&#34;&gt;10个现代软件过度工程的错误&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.nelhage.com/2016/12/how-i-test/&#34;&gt;我如何编写测试&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Lambda_architecture&#34;&gt;Lambda 架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://martinfowler.com/articles/evodb.html&#34;&gt;进化式数据库设计&lt;/a&gt; &lt;em&gt;(Martin Fowler)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.brunton-spall.co.uk/post/2014/05/06/database-migrations-done-right/&#34;&gt;正确进行数据库迁移&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/binhnguyennus/awesome-scalability&#34;&gt;强大的可扩展性&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sametab.com/blog/frameworks-for-remote-working&#34;&gt;亚马逊历史上最重要的一封内部邮件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/danistefanovic/build-your-own-x&#34;&gt;建立你自己的X&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/dangerous-engineering/a-reference-guide-for-fintech-small-data-engineering-bd65b9796d90&#34;&gt;金融科技与小数据工程的参考指南&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;技术&#34;&gt;技术&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;综合
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/a/487278/472433&#34;&gt;用通俗易懂的语言解释大O表示法&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jwasham/coding-interview-university&#34;&gt;Coding Interview University&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;机器学习
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/josephmisiti/awesome-machine-learning&#34;&gt;棒极了的机器学习&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/As-a-data-scientist-what-is-your-best-resource-of-everyday-learning&#34;&gt;日常机器学习的最佳资源&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://developers.google.com/machine-learning/crash-course/&#34;&gt;机器学习速成班：使用TensorFlow APIs&lt;/a&gt; &lt;em&gt;(Google)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://course.fast.ai&#34;&gt;编码者的深度学习&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;分布式基础理论
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-Is-CAP-Theorem-1&#34;&gt;什么是CAP定理&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://robertgreiner.com/cap-theorem-revisited/&#34;&gt;重新审视CAP定理&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;安全
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sqreen.com/checklists/saas-cto-security-checklist&#34;&gt;SaaS CTO安全检查表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;云计算
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/open-guides/og-aws&#34;&gt;亚马逊网络服务开放指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.expeditedssl.com/aws-in-plain-english&#34;&gt;亚马逊网络服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://web.archive.org/web/20190508145128/https://www.expeditedssl.com/azure-in-plain-english&#34;&gt;微软Azure&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://cloudacademy.com/blog/google-cloud-services-aws-expert/&#34;&gt;为AWS专家提供的谷歌云服务&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Javascript
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://superherojs.com&#34;&gt;SuperheroJS collection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://jstherightway.org&#34;&gt;JS: The Right Way&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/FrontendMasters/front-end-handbook-2017/blob/master/SUMMARY.md&#34;&gt;前端开发手册2017版&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;创业公司&#34;&gt;创业公司&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-the-things-startups-have-to-get-right&#34;&gt;创业公司必须要做好哪些事情?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/85-things-i-learned-being-a-ceo-4c25fc1c7b99&#34;&gt;我做CEO学到的85件事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/the-second-job-of-a-startup-ceo/&#34;&gt;创业公司CEO的第二份工作是什么?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.slideshare.net/laurenthaug/things-i-will-tell-my-kids-if-they-become-entrepreneurs&#34;&gt;如果我的孩子成为创业者，我会告诉他们的事&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-do-VCs-really-look-for-when-making-investments&#34;&gt;风投在做投资时到底看中的是什么?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-would-a-CTO-compensation-equity-be-for-a-small-startup&#34;&gt;对于一个小型创业公司来说，CTO的股权会是多少?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/As-an-employee-of-a-startup-how-do-you-know-when-to-quit&#34;&gt;作为创业公司的员工，你怎么知道什么时候该辞职?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.alexanderjarvis.com/pitch-deck-collection-from-vc-funded-startups/&#34;&gt;来自风险投资的创业公司的融资演讲稿集合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/ycs-series-a-diligence-checklist/&#34;&gt;YC的A轮尽职调查表&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://danluu.com/startup-options/&#34;&gt;期权与现金&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.samaltman.com/how-to-invest-in-startups&#34;&gt;如何投资创业公司&lt;/a&gt; - Sam Altman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.ycombinator.com/how-to-raise-a-seed-round/&#34;&gt;种子资金筹集指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://playbook.samaltman.com&#34;&gt;创业者游戏手册&lt;/a&gt; - Sam Altman&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://startupclass.samaltman.com&#34;&gt;Y Combinator 创业班&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://leanstack.com/leancanvas&#34;&gt;精益画布&lt;/a&gt; + &lt;a href=&#34;https://miro.com/templates/lean-canvas/&#34;&gt;Miro template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.figmafinder.com/figma-pitch-deck&#34;&gt;开源的Figma 融资演讲稿模板&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;相关内容&#34;&gt;相关内容&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://ithare.com/knowledge-sharing-architects-as-an-alternative-to-coding-architects/&#34;&gt;Knowledge-Sharing Architects As An Alternative to Coding Architects&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.freecodecamp.com/ten-rules-for-negotiating-a-job-offer-ee17cccbdab6&#34;&gt;洽谈工作机会的十条规则&lt;/a&gt; (also: &lt;a href=&#34;https://news.ycombinator.com/item?id=12197795&#34;&gt;HackerNews discussion&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-are-some-traits-practices-of-experienced-good-programmers-that-every-beginner-programmer-should-know&#34;&gt;经验丰富的程序员有哪些最佳实践?&lt;/a&gt; &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/&#34;&gt;对程序员名称的误解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.oreilly.com/programming/free/files/2016-european-software-development-salary-survey.pdf&#34;&gt;2016年欧洲软件开发薪资调查&lt;/a&gt; &lt;em&gt;(O&#39;Reilly)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.atlassian.com/devops&#34;&gt;DevOps：将开发和运营结合起来&lt;/a&gt; &lt;em&gt;(Atlassian)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Dataops&#34;&gt;数据运营&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.deconstructconf.com/blog/how-to-prepare-a-talk&#34;&gt;如何准备演讲&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://blog.pragmaticengineer.com/on-writing-well/&#34;&gt;被低估的软件工程技能：良好的写作能力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/lessons-from-mckinsey/the-pyramid-principle-f0885dd3c5c7&#34;&gt;金字塔原理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/@littleblah/my-top-25-items-in-a-senior-engineers-checklist-c8e9f9f6e3c2&#34;&gt;高级工程师的检查单&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://akfpartners.com/growth-blog/technical-due-diligence-checklists&#34;&gt;技术尽职调查表&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;产品&#34;&gt;产品&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/what-makes-a-great-product-manager-3c1d03b90356&#34;&gt;怎样才能成为优秀的产品经理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.saastr.com/if-you-dont-think-you-need-a-vp-of-product-marketing-etc-then-you-havent-worked-with-a-great-one/&#34;&gt;如果你认为你不需要产品副总裁......&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://capitalandgrowth.org/answers/Article/3143488/How-to-Find-Profitable-Business-Ideas&#34;&gt;红海，如何寻找有利可图的创业点子&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://amplitude.com/blog/2018/03/21/product-north-star-metric&#34;&gt;Product North Star Metric&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.quora.com/What-distinguishes-the-Top-1-of-product-managers-from-the-Top-10/answer/Ian-McAllister&#34;&gt;前1%的产品经理和前10%的产品经理有什么区别?&lt;/a&gt; - &lt;em&gt;(Quora)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.kennorton.com/essays/productmanager.html&#34;&gt;如何聘请产品经理&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.lemonade.com/blog/creative-thinking-hacks/&#34;&gt;创造性思维的秘密&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://medium.com/stellarpeers&#34;&gt;StellarPeers - 产品管理专访&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://svpg.com/product-vs-feature-teams/&#34;&gt;产品团队VS功能团队&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://bothsidesofthetable.com/most-startups-should-be-deer-hunters-7fdecf58f4f6&#34;&gt;大多数创业公司应该是猎鹿人&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://basecamp.com/shapeup&#34;&gt;Shape Up: Stop Running in Circles and Ship Work that Matters&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ganotnoa.com/how-to-write-your-first-strategic-roadmap-part-1/&#34;&gt;如何编写你的第一份战略路线图&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;市场营销&#34;&gt;市场营销&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.devmarketingguide.com&#34;&gt;开发人员营销指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.google.com/spreadsheets/d/1tAiya71mDQgtwn_F9-mNQhuc7GdsQ5e2_BeG69Cb82A/edit#gid=0&#34;&gt;创业公司营销和公关的顶级资源&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://saasemailmarketing.net&#34;&gt;SaaS电子邮件营销手册&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;更多链接&#34;&gt;更多链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kdeldycke/awesome-falsehood&#34;&gt;惊人的假象&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kilimchoi/engineering-blogs&#34;&gt;工程博客&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/bayandin/awesome-awesomeness&#34;&gt;Awesome Awesomeness&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus/awesome&#34;&gt;Awesome.re&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/92bondstreet/cto&#34;&gt;Chief Technology Officer vs Coder Thinker Organizer&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://staffeng.com&#34;&gt;高级软件工程师&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.socalcto.com/2011/09/startup-cto.html&#34;&gt;Socal CTO&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/92bondstreet/cto&#34;&gt;CTO资源列表&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/mateusz-brainhub/awesome-cto-resources&#34;&gt;Awesome CTO 资源&lt;/a&gt; &lt;em&gt;(GitHub)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://free-for.dev&#34;&gt;开发者的免费工具&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;版权&#34;&gt;版权&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://creativecommons.org/publicdomain/zero/1.0/&#34;&gt;&lt;img src=&#34;https://mirrors.creativecommons.org/presskit/buttons/88x31/svg/cc-zero.svg&#34; alt=&#34;CC0&#34;&gt;&lt;/a&gt;&lt;/p&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
