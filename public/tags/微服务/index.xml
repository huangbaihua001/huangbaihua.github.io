<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>微服务 on 柏华</title>
    <link>https://huangbaihua.gitee.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/</link>
    <description>Recent content in 微服务 on 柏华</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright © 2008–2021, 柏华; all rights reserved. Powered by Hugo</copyright>
    <lastBuildDate>Fri, 09 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://huangbaihua.gitee.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>微服务简介-来自优步的实践</title>
      <link>https://huangbaihua.gitee.io/post/microservice-architecture/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://huangbaihua.gitee.io/post/microservice-architecture/</guid>
      <description>
        
          &lt;p&gt;&lt;img src=&#34;https://huangbaihua.gitee.io/images/graph/u1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;微服务简介-来自优步的实践。&lt;/p&gt;
&lt;p&gt;源文: &lt;a href=&#34;https://eng.uber.com/microservice-architecture/&#34;&gt;Introduce Microservice Architecture&lt;/a&gt; (Uber)&lt;/p&gt;
&lt;h2 id=&#34;目录&#34;&gt;目录&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#%E7%AE%80%E4%BB%8B&#34;&gt;简介&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BB%80%E4%B9%88%E6%98%AF%E5%BE%AE%E6%9C%8D%E5%8A%A1&#34;&gt;什么是微服务&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%8A%A8%E6%9C%BA&#34;&gt;动机&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E9%9D%A2%E5%90%91%E9%A2%86%E5%9F%9F%E7%9A%84%E5%BE%AE%E6%9C%8D%E5%8A%A1%E6%9E%B6%E6%9E%84&#34;&gt;面向领域的微服务架构&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E4%BC%98%E6%AD%A5%E7%9A%84%E5%AE%9E%E7%8E%B0&#34;&gt;优步的实现&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%89%A9%E5%B1%95&#34;&gt;扩展&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%94%B6%E7%9B%8A&#34;&gt;收益&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E5%AE%9E%E7%94%A8%E5%BB%BA%E8%AE%AE&#34;&gt;实用建议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#%E6%9C%80%E5%90%8E%E7%9A%84%E6%84%9F%E6%83%B3&#34;&gt;最后的感想&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;简介&#34;&gt;简介&lt;/h1&gt;
&lt;p&gt;最近，人们围绕微服务架构，特别是微服务架构的缺陷展开了大量的讨论。仅仅几年前，由于微服务架构具有独立部署的灵活性，职责清晰，提升系统稳定性，更好的关注点隔离等众多优势，很多人都欣然采用了微服务架构。但近年来，人们开始抨击微服务有大大增加系统复杂性的趋向，有些时候让一个微小的功能都难于构建。&lt;/p&gt;
&lt;p&gt;由于优步发展到约2200个关键微服务，我们亲身经历过这些取舍权衡。在过去的2年里，优步一直试图降低微服务的复杂性，同时保持微服务架构的优势。我们希望通过这篇博文介绍我们对微服务架构的一般方法，我们称之为 &amp;quot;面向领域的微服务架构&amp;quot;(DOMA)。&lt;/p&gt;
&lt;p&gt;虽然近些年由于这些缺陷人们对微服务架构的批评多了起来，但很少有人提倡完全拒绝微服务。运营效益太重要了，似乎还没有或部分可替代的架构。我们使用DOMA的目标是为那些想要降低整个系统复杂性的同时又能维持微服务优势的组织提供一种前进的道路。&lt;/p&gt;
&lt;p&gt;这篇文章解释了DOMA, 是什么导致优步采用这种架构，对平台和产品团队的好处，最后是针对那些想采用这种架构的团队的一些建议。&lt;/p&gt;
&lt;h1 id=&#34;什么是微服务&#34;&gt;什么是微服务&lt;/h1&gt;
&lt;p&gt;微服务是面向服务架构的延伸。与2000年代相当大的 &amp;quot;服务 &amp;quot;相比，微服务是代表一组更小范围的功能的应用程序。这些应用通过网络托管和提供，并暴露出一个定义良好的接口。其他应用程序通过 &amp;quot;远程过程调用&amp;quot;(RPC)来调用这个接口。&lt;/p&gt;
&lt;p&gt;微服务架构的关键特征是代码托管、调用和部署的方式。如果我们思考大型的单体应用，它们一般会被分割成具有明确定义接口的封装组件。这些接口就会直接在进程中调用，而不是通过网络。通过这种方式，我们也可以将微服务看作一个库，为了调用库中的所有功能有些性能影响（这些影响来自网络I/O和序列化/反序列化的开销）。&lt;/p&gt;
&lt;p&gt;当我们这样思考微服务的时候，可能会质疑自己为什么要采用微服务架构。答案通常是独立部署和扩展。对于一个大型的单体应用，一个组织被迫一次性部署或发布所有的代码。应用程序的每一个新版本都可能涉及许多更改。部署变得风险大、耗时长。任何人都可以使整个系统瘫痪&lt;/p&gt;
&lt;p&gt;换句话，组织采用微服务是为了运营效率而牺牲了性能。组织也必须承担支撑微服务所必需的维护基础设施的费用。事实证明，在多数情况下，这种取舍权衡是很有意义的，但是也强烈反对过早地采用微服务架构。&lt;/p&gt;
&lt;h1 id=&#34;动机&#34;&gt;动机&lt;/h1&gt;
&lt;p&gt;在优步，我们采用了微服务架构，因为(在大约2012-2013年)主要有两个单体服务，并且遇到了许多微服务解决的运营问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;可用性风险&lt;/span&gt;。 在整个单体代码库中，一次回归就可以让整个系统(本例指优步所有系统)崩溃。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;风险大，昂贵的部署&lt;/span&gt;。 部署是痛苦的，耗时的，而且需要经常回滚。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;不好的关注点分离&lt;/span&gt;。 很难在一个庞大的代码库中保持良好的关注点分离。在指数级增长的环境中，权宜之计有会会导致逻辑和组件之间的边界不清。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;执行效率低下&lt;/span&gt;。 这些问题加在一起，使团队难以自治或独立执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;换句话说，由于优步从10多个工程师发展到100多个工程师拥有自技术栈的团队时，单体架构将团队的命运捆绑在了一起并使其难以独立运作。
因此，我们采用了微服务架构。 最终，我们的系统变得更加灵活，这使得团队更加自治。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;系统可靠性&lt;/span&gt;。总体系统可靠性在微服务体架构中得到提高。单个服务可以关闭(并回滚)，而不需要关闭整个系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;关注点分离&lt;/span&gt;。从架构上讲，微服务架构迫使您问这样一个问题:“这个服务为什么存在?”，能更清晰地定义不同组件的角色。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;明确所有权&lt;/span&gt;。 谁拥有什么代码变得更加清晰。 服务通常在个人、团队或组织级别拥有，从而实现更快的增长。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;自主执行&lt;/span&gt;。独立的部署+更清晰的所有权，解锁了不同产品和平台团队的自主执行。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;span style=&#39;font-weight:bold&#39;&gt;开发速度&lt;/span&gt;。团队可以独立部署他们的代码，这使他们能够按照自己的节奏执行。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以毫不夸张地说，如果没有微服务架构，优步不可能实现今天保持的规模和质量。&lt;/p&gt;
&lt;p&gt;然而，随着公司规模的扩大，从100名工程师到1000名工程师，我们开始注意到一系列与大大增加系统复杂性相关的问题。
在微服务架构中，用一个单体代码库交换了一个可以随时更改功能并容易导致意外行为的黑盒。&lt;/p&gt;
&lt;p&gt;例如，工程师必须通过12个不同团队的约50项服务来调查问题的根本原因。&lt;/p&gt;
&lt;p&gt;理解服务之间的依赖关系会变得相当困难，因为服务之间的调用会深入许多层。第n个依赖关系的延迟峰值可能会导致上游的一连串问题。
如果没有合适的工具，就不可能看到实际发生的事情，这使得调试变得困难。&lt;/p&gt;
&lt;p&gt;为了构建一个简单的功能，工程师往往需要跨多个服务工作，所有这些服务都由不同的个人和团队拥有。
这就需要广泛的合作，在会议、设计和代码审查上花费时间。
由于团队在彼此的服务中构建代码，修改彼此的数据模型，甚至代表服务所有者执行部署，早期对服务所有权的明确界限的承诺受到了影响。
网络化的单体可能会形成，看似独立的服务都必须部署在一起，才能安全地执行任何变更。&lt;/p&gt;
&lt;p&gt;An example of a complex flow at Uber circa 2018, which required 10 touch points for a simple integration before DOMA.&lt;/p&gt;
&lt;p&gt;The result is a slower developer experience, instability for service owners, more painful migrations, etc. 
For organizations that have already adopted a microservice architecture there is no turning back.
It becomes a case of “can’t live with them, can’t live without them.”&lt;/p&gt;
&lt;h1 id=&#34;面向领域的微服务架构&#34;&gt;面向领域的微服务架构&lt;/h1&gt;
&lt;p&gt;If we can think of microservices as I/O bound libraries and a “microservice architecture” as a large, distributed application then we can use well understood architectures 
to think about how to organize our code.&lt;/p&gt;
&lt;p&gt;“Domain-Oriented Microservice Architecture” thus draws heavily from established ways to organize code such as Domain-driven Design, Clean Architecture,
Service-Oriented Architecture, and object- and interface-oriented design patterns.
We think of DOMA as innovative only insofar as it is a relatively novel way to leverage established design principles in large distributed systems in large organizations.&lt;/p&gt;
&lt;p&gt;The core principles and terminology associated with DOMA are as follows:&lt;/p&gt;
&lt;p&gt;Instead of orienting around single microservices, we oriented around collections of related microservices. We call these domains.
We further create collections of domains which we call layers. The layer that the domain belongs to establishes what dependencies the microservices within that domain are allowed to take on.
We call this layer design.
We provide clean interfaces for domains that we treat as a single point of entry into the collection. We call these gateways.
Finally, we establish that each domain should be agnostic to other domains, which is to say, a domain shouldn’t have logic related to another domain hard coded inside of its code base or data models.
Since frequently teams do need to include logic in another team’s domain (for example, custom validation logic or some meta context on a data model),
we provide an extension architecture to support well defined extension points within the domain.
In other words, by providing a systematic architecture, domain gateways, and predefined extension points,
DOMA intends to transform microservice architectures from something complex to something comprehensible: a structured set of flexible, reusable, and layered components.&lt;/p&gt;
&lt;p&gt;The rest of this post digs into Uber’s implementation of DOMA, the benefits we’ve seen, and practical advice for companies which might want to adopt this approach.&lt;/p&gt;
&lt;h1 id=&#34;优步的实现&#34;&gt;优步的实现&lt;/h1&gt;
&lt;h2 id=&#34;领域&#34;&gt;领域&lt;/h2&gt;
&lt;p&gt;Uber domains represent a collection of one or more microservices tied to a logical grouping of functionality. A common question in designing a domain is “how big should a domain be?”
We give no guidance here. Some domains can include tens of services, some domains only a single service. The important task is to think carefully about the logical role of each collection.
For instance, our map search services constitute a domain, fare services are a domain, matching platform (matching riders and drivers) are a domain. These also don’t always follow company org structure.
The Uber Maps org itself is split into three domains, with 80 microservices behind 3 different gateways.&lt;/p&gt;
&lt;h2 id=&#34;分层设计&#34;&gt;分层设计&lt;/h2&gt;
&lt;p&gt;Layer design answers the question of “what service can call what other service?” within Uber’s microservice architecture. As a result, we can think of layer design as “separation of concerns at scale.”
Alternatively, we can think of layer design as “dependency management at scale.”&lt;/p&gt;
&lt;p&gt;Layer design describes a mechanism for thinking about failure blast radius and product specificity across service dependencies at Uber. As domains move from the bottom layer to the top layer,
they impact fewer services in the case of an outage and represent more specific product use cases. Conversely,
functionality at the bottom layers have more dependents and as a result tend to have a larger blast radius and represent a more general set of business functionality. The figure below illustrates this concept.&lt;/p&gt;
&lt;p&gt;One can think of the top layers as specific user experiences (such as mobile features), and the bottom layers as generalized business functionality (such as account management or marketplace trips).
Layers only depend on the layers under them, which gives us a useful heuristic to think about questions like blast radius and domain integration.&lt;/p&gt;
&lt;p&gt;It’s worth noting that functionality often moves “down” this chart from specific to more general. One can imagine a simple feature that eventually becomes more and more of a platform as requirements evolve.
In fact, this sort of migration downward is expected, and many of Uber’s core business platforms started as rider or driver specific functionality
that became more generalized as we developed more lines of business and they took on more dependencies (such as Uber Eats or Uber Freight).&lt;/p&gt;
&lt;p&gt;Within Uber, we established the following five layers.&lt;/p&gt;
&lt;p&gt;Infrastructure layer. Provides functionality that any engineering organization could use. It’s Uber’s answer to the big engineering questions, such as storage or networking.
Business layer. Provides functionality that Uber as an organization could use, but that is not specific to a particular product category or line of business (LOB) such as Rides, Eats, or Freight.
Product layer. Provides functionality that relates to a particular product category or LOB, but is agnostic to the mobile application,
such as the “request a ride” logic which is leveraged by multiple Rides facing applications (Rider, Rider “Lite”, m.uber.com, etc).
Presentation. Provide functionality that directly relates to features that exist within a consumer-facing application (mobile/web).
Edge Layer. Safely exposes Uber services to the outside world. This layer is also mobile application aware.
As you can see, each subsequent layer represents an increasingly specific grouping of functionality, and has a smaller and smaller blast radius
(or, in other words, less components depend on the functionality within that layer).&lt;/p&gt;
&lt;h2 id=&#34;网关&#34;&gt;网关&lt;/h2&gt;
&lt;p&gt;The term “Gateway API” is already a broadly established concept within microservice architectures. Our definition does not vary greatly from the established definition,
except that we tend to think of gateways exclusively as a single entry-point into a collection of underlying services, which we call a domain. The success of a gateway relies on the success of the API design.&lt;/p&gt;
&lt;p&gt;The following figure illustrates the high level diagram of a gateway. It abstracts away the internal details of the domains – multiple services, data tables, ETL pipelines etc. Only the interfaces –
RPC APIs, messaging events and queries are exposed to other domains.&lt;/p&gt;
&lt;p&gt;Since upstream consumers only operate on a single service, gateways provide numerous benefits in terms of future migrations, discoverability, and overall reduction in system complexity with upstream services only taking a single dependency as opposed to dependencies on several downstream services that might exist within a domain. If we think about gateways in the sense of OO design, they are interface definitions, which enable us to do whatever we want in terms of the underlying “implementation” (in this case the collection of underlying microservices).&lt;/p&gt;
&lt;h1 id=&#34;扩展&#34;&gt;扩展&lt;/h1&gt;
&lt;p&gt;Extensions represent a mechanism to extend domains. The basic definition of an extension is that it provides a mechanism for extending the functionality of an underlying service without changing the actual implementation of that service and without impacting its overall reliability. At Uber we provide two different extension models: logic extensions and data extensions. The concept of extensions has allowed us to scale our architecture to multiple teams being able to work independently of each other.&lt;/p&gt;
&lt;h2 id=&#34;逻辑扩展&#34;&gt;逻辑扩展&lt;/h2&gt;
&lt;p&gt;Logic extensions provide a mechanism for extending the underlying logic of a service. For logic extensions we use a variation of a provider or plugin pattern with an interface defined on a service-by-service basis. This makes it so that extending teams can implement extension logic in an interface-driven way without modifying the core code of the underlying platform.&lt;/p&gt;
&lt;p&gt;For example, a driver goes online. Typically, we make various checks to ensure that a driver is allowed to go online (safety checks, compliance, etc.). Each of these is owned by an individual team. One way to implement this would be to have each team write logic in the same endpoint, but this can introduce complexity. Each check would require custom, and entirely unrelated, logic.&lt;/p&gt;
&lt;p&gt;In the case of logic extensions, the “go online” endpoint would define an interface that they expect each extension to conform to with a predefined request type and a response. Each team would register an extension that would be responsible for the execution of this logic. In this case, they might simply take some context about the driver and return a bool, saying if the driver can go online or not. The go online endpoint would simply iterate through these responses, and determine if any of them are false.&lt;/p&gt;
&lt;p&gt;This decouples the core code from each extension, and provides isolation between extensions, which don’t know what other logic is executing. It’s easy to build up more functionality around this, such as observability or feature flagging.&lt;/p&gt;
&lt;h2 id=&#34;数据扩展&#34;&gt;数据扩展&lt;/h2&gt;
&lt;p&gt;Data extensions provide a mechanism for attaching arbitrary data to an interface to avoid bloat in core platform data models. For data extensions, we leverage Protobuf’s Any functionality so that teams can add arbitrary data to requests. Services will often store this data or pass it to a logic extension so that the core platform is never responsible for deserializing (and thus “knowing about”) this arbitrary context. Protobuf’s Any implementation comes with some infrastructure overhead in exchange for stronger typing. For a simpler implementation, one could just as easily use a JSON string to represent arbitrary data.&lt;/p&gt;
&lt;h2 id=&#34;自定义&#34;&gt;自定义&lt;/h2&gt;
&lt;p&gt;Outside of logic and data extensions, many teams at Uber have introduced their own extension patterns that are appropriate for their domain. For example, much of the integrations tied to our presentation architecture uses DAG based task execution logic.&lt;/p&gt;
&lt;h1 id=&#34;收益&#34;&gt;收益&lt;/h1&gt;
&lt;p&gt;Almost every major domain at Uber has been influenced on some level by DOMA. Over the last year, we have focused primarily on Uber’s business layer which provides generalized logic for each of our various lines of business.&lt;/p&gt;
&lt;p&gt;DOMA is still young at Uber, and we are excited to share more data and in-depth examples of our architecture in the future. However, early signs have been extremely positive in terms of a simplified developer experience and a reduction in overall system complexity.&lt;/p&gt;
&lt;h2 id=&#34;产品和平台&#34;&gt;产品和平台&lt;/h2&gt;
&lt;p&gt;DOMA was the result of a consensus effort across product and platform teams at Uber. Platform support costs often dropped an order of magnitude. Product teams benefited from guard rails and accelerated development.&lt;/p&gt;
&lt;p&gt;For example, an early platform consumer of our extensions architecture was able to drop the time to prioritize and integrate a new feature from three days to three hours by adopting an extension architecture with reduced time for code review, planning, and learning curve for consumers.&lt;/p&gt;
&lt;h2 id=&#34;降低复杂度&#34;&gt;降低复杂度&lt;/h2&gt;
&lt;p&gt;Previously product teams would have to call numerous downstream services to leverage a domain; they now have to call just one. By reducing the number of touchpoints to onboard a new feature, platforms were able to reduce onboarding time by 25-50%. Furthermore, we were able to classify 2200 microservices into 70 domains. Roughly 50% of which have been implemented, and most of which have some plan for future adoption.&lt;/p&gt;
&lt;h2 id=&#34;未来迁移&#34;&gt;未来迁移&lt;/h2&gt;
&lt;p&gt;At Uber, we calculated that the half-life of a microservice was 1.5 years, which means that every 1.5 years 50% of our microservices churn. Without gateways it’s easy for a microservice architecture to fall into a “migration hell” as a result of this churn. Ever changing microservices constantly require upstream migrations. Gateways enable teams to avoid dependencies on the underlying domain services, which means those services can change without forcing an upstream migration.&lt;/p&gt;
&lt;p&gt;Two of Uber’s largest platform rewrites in the last year happened behind gateways. These platforms had hundreds of services that depended on them that would have had to migrate existing consumers. The cost of migration in these cases would have been extremely high, making a complete platform rewrite infeasible.&lt;/p&gt;
&lt;h2 id=&#34;新业务和产品new-lines-of-business--products&#34;&gt;新业务和产品New Lines of Business &amp;amp; Products&lt;/h2&gt;
&lt;p&gt;Platforms designed using DOMA have proven to be much more extensible and easier to maintain. Most teams at Uber who adopted DOMA did so because supporting new lines of business had become too expensive.&lt;/p&gt;
&lt;h1 id=&#34;实用建议&#34;&gt;实用建议&lt;/h1&gt;
&lt;p&gt;This section provides some practical advice for companies that might want to adopt DOMA. The guiding principle here is that in our experience a mature and thoughtful microservice architecture stems from quiet nudges in the right direction at the right time. The reality is that a true “rewrite” is never possible for one’s entire microservice architecture.&lt;/p&gt;
&lt;p&gt;As a result, we think of evolving a microservice architecture more like “trimming a hedge” so that it eventually grows correctly, rather than a top-down or one-time architecture (or re-architecture) effort. It’s a dynamic and progressive process.&lt;/p&gt;
&lt;h2 id=&#34;创业公司&#34;&gt;创业公司&lt;/h2&gt;
&lt;p&gt;The driving questions should be “when should we adopt a microservice architecture?” and “does it make sense for our organization?” As we’ve seen above, while microservices provide an operational benefit to organizations with a large number of engineers, this trades off with an increase in complexity that can make features more difficult to build.&lt;/p&gt;
&lt;p&gt;In small organizations, the operational benefit likely does not offset the increase in architectural complexity. Furthermore, microservice architectures often require dedicated engineering resources to support which may be out of budget for an early stage company or else suboptimal from a prioritization perspective.&lt;/p&gt;
&lt;p&gt;With this in mind, it isn’t unreasonable to hold off on microservices altogether for some time. If an organization does choose to adopt microservices, it should think about the “microservice as large distributed application” analogy, and the separation of concerns between microservices it wants to build. Also, recognize that the first microservices will likely be the most important and longest lasting as they truly describe the core of the business.&lt;/p&gt;
&lt;h2 id=&#34;中小公司&#34;&gt;中小公司&lt;/h2&gt;
&lt;p&gt;Once a company becomes midsized with multiple teams and the clear separation of concerns becomes hazy between different features and platforms, microservice architectures become more obviously useful.&lt;/p&gt;
&lt;p&gt;It’s at this stage that one can begin to think about hierarchies between microservices. Dependency management may become more important, as some services begin to become more obviously critical to business operation, and more and more teams rely on them.&lt;/p&gt;
&lt;p&gt;Early investment in platformization may pay dividends down the road. There is the possibility to avoid tech debt here if one can create completely product agnostic business platforms and avoid arbitrary product logic in core platform services. It might make sense to adopt extensions at this point to accomplish that goal.&lt;/p&gt;
&lt;p&gt;Given that the number of microservices is likely still quite low, it may not make sense to cluster them together. However, it’s worth noting here that a domain in the context of Uber’s DOMA implementation can contain a single service, so it may still be useful to think in a “domain-oriented” way.&lt;/p&gt;
&lt;h2 id=&#34;大公司&#34;&gt;大公司&lt;/h2&gt;
&lt;p&gt;Larger engineering organizations may have hundreds of engineers and microservices and several dependencies. At this point DOMA reaches its full usefulness. There will likely be obvious clusters of microservices that can be easily grouped together into domains with a gateway in front of them. Legacy services often begin to need to be refactored or rewritten and then migrated, which means that gateways will soon begin to provide value in terms of ease of migration if they are already in place.&lt;/p&gt;
&lt;p&gt;Clear hierarchy will also become increasingly important with some services operating as “product” services for particular features or grouping of features, and other services will increasingly support multiple products and be thought of as “platforms.” It’s critical at this stage to keep arbitrary product logic decoupled from platforms, so as to avoid a heavy operational burden on platform teams as well as system-wide instability.&lt;/p&gt;
&lt;h1 id=&#34;最后的感想&#34;&gt;最后的感想&lt;/h1&gt;
&lt;p&gt;We are still actively evolving DOMA as more and more teams at Uber come to adopt it. The critical insight of DOMA is that a microservice architecture is really just one, large,
distributed program and you can apply the same principles to its evolution that you would apply to any piece of software.
DOMA is simply an approach for thinking about these principles in practice. We hope others find it useful and we look forward to feedback!&lt;/p&gt;
&lt;p&gt;DOMA itself was the result of a cross-functional effort, which involved nearly 60 engineers across every org at Uber.
Some particular acknowledgements, for people who invested heavily into this effort over the last 2 years…&lt;/p&gt;
&lt;p&gt;Alex Zylman,
Alexandre Wilhelm, Allen Lu, Ankit Srivastava, Anthony Tran, Anupam Dikshit, Anurag Biyani, Daniel Wolf, Davide D’Agostino,
Deepti Chedda, Dmitriy Bryndin, Gaurav Tungatkar, Jacob Greenleaf, Jaikumar Ganesh, Jennie Ngyuen, Joe McCabe,
Joshua Shinavier, Julia Law, Kusha Kapoor, Linda Fu, Madan Thangavelu, Nimish Sheth, Parth Shah, Shawn Burke,
Simon Newton, Steve Sherwood, Uday Kiran Medisetty, and Waleed Kadous&lt;/p&gt;
&lt;p&gt;Acknowledgements:&lt;/p&gt;
&lt;p&gt;This work brings multiple existing design patterns in the industry to solve problems at Uber while also suggesting new patterns like extensions.
We are thankful to the industry for the work on them. We are also thankful to the engineers at Linkedin who worked on Superblocks, who spoke to us about their experiences.&lt;/p&gt;
&lt;p&gt;(全文完)&lt;/p&gt;
        
      </description>
    </item>
    
  </channel>
</rss>
